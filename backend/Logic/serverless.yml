service: teacher-link

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'staging'}
  region: ap-south-1
  deploymentBucket:
    name: teacherlink-deployments-ap-south-1  # Your S3 bucket for deployments
  memorySize: 256
  environment:
    DB_HOST: ${var.DB_HOST}
    DB_USER: ${var.DB_USER}
    DB_PASSWORD: ${var.DB_PASSWORD}
    DB_NAME: ${var.DB_NAME}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: ${var.AWS_NODEJS_CONNECTION_REUSE_ENABLED}
    DYNAMODB_TABLE: ${var.DYNAMODB_TABLE}
    S3_BUCKET: ${var.S3_BUCKET}
    AWS_LOCATION_API_KEY: ${env:AWS_LOCATION_API_KEY}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:Query
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
        - geo:SearchPlaceIndexForText
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}
        - arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
        - arn:aws:geo:${self:provider.region}:*:place-index/TeacherLinkPlaceIndex

  iam:
    role:
      statements:
        # Allow Secrets Manager access
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: arn:aws:secretsmanager:ap-south-1:*:secret:teacherlink-*

        # Allow S3 access
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::teacherlink
            - arn:aws:s3:::teacherlink/*
            - arn:aws:s3:::teacherlink-deployments-ap-south-1/developement/firebase.json
            - arn:aws:s3:::teacherlink-deployments-ap-south-1

        # Allow RDS connection
        - Effect: Allow
          Action:
            - rds-db:connect
          Resource: arn:aws:rds-db:ap-south-1:*:dbuser:*/teacherlink_user

        # Allow CloudFormation, API Gateway, Lambda, and Logs
        - Effect: Allow
          Action:
            - cloudformation:*
            - apigateway:*
            - lambda:*
            - logs:*
          Resource: "*"

        # Allow AWS Location Service access (for geocoding / Google Maps alternative)
        - Effect: Allow
          Action:
            - geo:SearchPlaceIndexForText
          Resource: arn:aws:geo:${self:provider.region}:*:place-index/TeacherLinkPlaceIndex

        # Allow public read access to organization_photos in the deployments bucket
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: arn:aws:s3:::teacherlink-deployments-ap-south-1/organization_photos/*

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  serverless-offline:
    httpPort: 3000
    noPrependStageInUrl: true
    useChildProcesses: true

functions:
  geocode:
    handler: src/handlers/geocoding.geocodeLocation
    events:
      - http:
          path: /geocode
          method: get
          cors: true
      - http:
          path: /geocode
          method: options
          cors: true

  users:
    handler: src/handlers/users.lambdaHandler
    environment: ${file(src/env/${self:provider.stage}.yml)}
    timeout: 29
    events:
      - http:
          path: users
          method: POST
      - http:
          path: users/{id}
          method: GET
      - http:
          path: users/{id}
          method: PUT
      - http:
          path: users/{id}
          method: DELETE

  logingoogle:
    handler: src/handlers/logingoogle.handler
    environment: ${file(src/env/${self:provider.stage}.yml)}
    timeout: 29
    events:
      - http:
          path: logingoogle
          method: post

  createOrganization:
    handler: src/handlers/organization.handler
    environment: ${file(src/env/${self:provider.stage}.yml)}
    timeout: 29
    events:
      - http:
          path: organization
          method: post
          cors: true    
      - http:
          path: organization/{id}
          method: get
          cors: true
      - http:
          path: organization/{id}
          method: put
          cors: true
      - http:
          path: organization/{id}
          method: delete
          cors: true

  Designationdata:
    handler: src/handlers/handler.handler
    events:
      - http:
          path: constants
          method: get
          cors: true

  Educationdata:
    handler: src/handlers/Education.handler
    events:
      - http:
          path: education-data
          method: get
      
  Languagesdata:
    handler: src/handlers/languages.handler
    events:
      - http:
          path: languages
          method: get

  createOTP:
    handler: src/handlers/createOTP.createOTP
    events:
      - http:
          path: otp/create
          method: post
          cors: true
  
  getOTP:
    handler: src/handlers/getOTP.getOTP
    events:
      - http:
          path: otp/verify
          method: post
          cors: true

  subscription:
    handler: src/handlers/subscription.lambdaHandler
    environment: ${file(src/env/${self:provider.stage}.yml)}
    events:
      - http:
          path: subscription
          method: post
          cors: true
      - http:
          path: subscription/{firebase_uid}
          method: get
          cors: true
      - http:
          path: subscription/{firebase_uid}
          method: delete
          cors: true

  cost:
    handler: src/handlers/cost.lambdaHandler
    environment: ${file(src/env/${self:provider.stage}.yml)}
    events:
      - http:
          path: process
          method: post
          cors: true

  coupon:
    handler: src/handlers/coupon.lambdaHandler
    environment: ${file(src/env/${self:provider.stage}.yml)}
    events:
      - http:
          path: GenerateCouponBulk
          method: post
          cors: true
      - http:
          path: RedeemCoupon
          method: post
          cors: true

  referralSubmission:
    handler: src/handlers/referralSubmission.lambdaHandler
    environment: ${file(src/env/${self:provider.stage}.yml)}
    events:
      - http:
          path: submission
          method: post
          cors: true

  referralRegistration:
    handler: src/handlers/referralRegistration.lambdaHandler
    environment: ${file(src/env/${self:provider.stage}.yml)}
    events:
      - http:
          path: register
          method: post
          cors: true

package:
  exclude:
    - test/**
    - .git/**
    - README.md