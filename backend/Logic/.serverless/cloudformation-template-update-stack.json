{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "GeocodeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-geocode"
      }
    },
    "UsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-users"
      }
    },
    "LogingoogleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-logingoogle"
      }
    },
    "CreateOrganizationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-createOrganization"
      }
    },
    "DesignationdataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-Designationdata"
      }
    },
    "EducationdataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-Educationdata"
      }
    },
    "LanguagesdataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-Languagesdata"
      }
    },
    "CreateOTPLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-createOTP"
      }
    },
    "GetOTPLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-getOTP"
      }
    },
    "SubscriptionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-subscription"
      }
    },
    "CostLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-cost"
      }
    },
    "CouponLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-coupon"
      }
    },
    "ReferralSubmissionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-referralSubmission"
      }
    },
    "ReferralRegistrationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/teacher-link-staging-referralRegistration"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "teacher-link",
                  "staging",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/teacher-link-staging*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/teacher-link-staging*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetSecretValue"
                  ],
                  "Resource": "arn:aws:secretsmanager:ap-south-1:*:secret:teacherlink-*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    "arn:aws:s3:::teacherlink",
                    "arn:aws:s3:::teacherlink/*",
                    "arn:aws:s3:::teacherlink-deployments-ap-south-1/developement/firebase.json",
                    "arn:aws:s3:::teacherlink-deployments-ap-south-1"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "rds-db:connect"
                  ],
                  "Resource": "arn:aws:rds-db:ap-south-1:*:dbuser:*/teacherlink_user"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:*",
                    "apigateway:*",
                    "lambda:*",
                    "logs:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "geo:SearchPlaceIndexForText"
                  ],
                  "Resource": "arn:aws:geo:ap-south-1:*:place-index/TeacherLinkPlaceIndex"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::teacherlink-deployments-ap-south-1/organization_photos/*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "teacher-link",
              "staging",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GeocodeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/geocoding.geocodeLocation",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-geocode",
        "MemorySize": 256,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GeocodeLogGroup"
      ]
    },
    "UsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/users.lambdaHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-users",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UsersLogGroup"
      ]
    },
    "LogingoogleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/logingoogle.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-logingoogle",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogingoogleLogGroup"
      ]
    },
    "CreateOrganizationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/organization.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-createOrganization",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateOrganizationLogGroup"
      ]
    },
    "DesignationdataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/handler.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-Designationdata",
        "MemorySize": 256,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DesignationdataLogGroup"
      ]
    },
    "EducationdataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/Education.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-Educationdata",
        "MemorySize": 256,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EducationdataLogGroup"
      ]
    },
    "LanguagesdataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/languages.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-Languagesdata",
        "MemorySize": 256,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LanguagesdataLogGroup"
      ]
    },
    "CreateOTPLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/createOTP.createOTP",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-createOTP",
        "MemorySize": 256,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateOTPLogGroup"
      ]
    },
    "GetOTPLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/getOTP.getOTP",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-getOTP",
        "MemorySize": 256,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetOTPLogGroup"
      ]
    },
    "SubscriptionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/subscription.lambdaHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-subscription",
        "MemorySize": 256,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubscriptionLogGroup"
      ]
    },
    "CostLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/cost.lambdaHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-cost",
        "MemorySize": 256,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CostLogGroup"
      ]
    },
    "CouponLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/coupon.lambdaHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-coupon",
        "MemorySize": 256,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CouponLogGroup"
      ]
    },
    "ReferralSubmissionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/referralSubmission.lambdaHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-referralSubmission",
        "MemorySize": 256,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ReferralSubmissionLogGroup"
      ]
    },
    "ReferralRegistrationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "teacherlink-deployments-ap-south-1",
          "S3Key": "serverless/teacher-link/staging/1743788231750-2025-04-04T17:37:11.750Z/teacher-link.zip"
        },
        "Handler": "src/handlers/referralRegistration.lambdaHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "teacher-link-staging-referralRegistration",
        "MemorySize": 256,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_USER": "teacherlink_user",
            "DB_PASSWORD": "Inspireedge2024",
            "DB_NAME": "teacherlink",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DYNAMODB_TABLE": "Inspire-dynamic-data",
            "S3_BUCKET": "teacherlink-deployments-ap-south-1",
            "AWS_LOCATION_API_KEY": "v1.public.eyJqdGkiOiI0MzUzZTNkNS03ZGQ1LTRjZmItYjgxNC1iM2ZmMjkzZmMxZDIifWN8q9jXyRyZ47WY1lHBwruHsXimsRUm54xa1AHsLkz-N2ArGLi1JGwdqtIOAJoJ7iezqjDjNUHwxOejPRJKek4GkTgSJSvL2xeNSkWLbxWCSu70qCABDkQkBLyUJL__K6PLgCTrQ9IruXiv2re9T08xjIBmQrnmSe44gvYk29X60l1khqtAcb8yDTqa0jyxMpi4ZYUiyPKpzZ-E1B8dc13DFqpaR20cD8eQIuFr7H1ADe0rs0q0AhkC3Ng4MZiScl8H9qA1ZGKbPGDXeWyj2zR5zVAscD9BVmUPvawRCdqqOC3f4PpB--2g6q-J2VmhmtZ2By6W6wxNuB09gKXjzg8.Njg1MGZlZTUtYTI2ZS00MDdlLWJjNDktMDNmZDlkNzVmMjQ0",
            "COUPON_BUCKET": "teacherlink-coupons-bucket",
            "FIREBASE_API_KEY": "AIzaSyAOoHLzVyNXUMS2B9HuzxlK8CbIR4O6rT8"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ReferralRegistrationLogGroup"
      ]
    },
    "GeocodeLambdaVersionVNvUaThzPm3flwKKfHUqfkUtcFp455wybCUkGTJ7Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GeocodeLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "UsersLambdaVersionYymBTpbKv0TEJtXjj0qUfTJSe9dV8sLxUYZEJxLx6g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UsersLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "LogingoogleLambdaVersionA5WVSLcK2mVG2ptOX7vCezkaX3sYFQMqmRlPFDxM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LogingoogleLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "CreateOrganizationLambdaVersionv5s3vCZ5PIQHp4Yq3g7Nx9S1G3OwKACTaGOjSjI0w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateOrganizationLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "DesignationdataLambdaVersionzbvCUoIcMjG3VeoatwH3ZKGohdpZqB3yPRy95HRZ8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DesignationdataLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "EducationdataLambdaVersioncoTKS7MAzTOTAvfwOopn0RmtQ7QPCtumNkM03EZpZE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EducationdataLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "LanguagesdataLambdaVersiontXlMYMCWTWK3NOWpi83FcuOxvyFSEUOHY1itmItJ5g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LanguagesdataLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "CreateOTPLambdaVersionfX5mml7dnePe9eHIAXekHxNZhwffoh5eHZMwd4CaV3s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateOTPLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "GetOTPLambdaVersion8xE9oCXmI1OCPIf6o8AeqPRwljWzES6OQa2H5fB0fY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetOTPLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "SubscriptionLambdaVersionXX8d3GgCdzzIiphe5iqvzhyGZ0ZCy8ZEVEBBQdPP6Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubscriptionLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "CostLambdaVersionBnxU2PPRYWJN8Ock1wqxBIQXuQaf0x0xUCmu1JBVljo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CostLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "CouponLambdaVersion0PIY8fmdPOrKVlH5Nt80vv352LCykE0Q8jB37Tsmn8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CouponLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "ReferralSubmissionLambdaVersionrjziwYptQMaJr1RXcaW7wZuAqbBZxzoeiaUnEw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ReferralSubmissionLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "ReferralRegistrationLambdaVersionxrqreoHZL9aRs4IpyTcdJOe2rWjJcJ2LLRQZbPY5xfI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ReferralRegistrationLambdaFunction"
        },
        "CodeSha256": "xAQ6NF830pC5ztr0MGMNP0RH77jpB87iI0ZmgcZSH0w="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "staging-teacher-link",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceGeocode": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "geocode",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLogingoogle": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "logingoogle",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOrganization": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "organization",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOrganizationIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceOrganization"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceConstants": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "constants",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEducationDashdata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "education-data",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLanguages": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "languages",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOtp": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "otp",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOtpCreate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceOtp"
        },
        "PathPart": "create",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOtpVerify": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceOtp"
        },
        "PathPart": "verify",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSubscription": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "subscription",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSubscriptionFirebaseuidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSubscription"
        },
        "PathPart": "{firebase_uid}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceProcess": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "process",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGeneratecouponbulk": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "GenerateCouponBulk",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRedeemcoupon": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "RedeemCoupon",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSubmission": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "submission",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSubmissionIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSubmission"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRegister": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "register",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGeocodeOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "AWS_PROXY",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ],
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GeocodeLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGeocode"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false
      },
      "DependsOn": [
        "GeocodeLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodOrganizationOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceOrganization"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodOrganizationIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceOrganizationIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodConstantsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceConstants"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodOtpCreateOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceOtpCreate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodOtpVerifyOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceOtpVerify"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSubscriptionOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSubscription"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSubscriptionFirebaseuidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSubscriptionFirebaseuidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodProcessOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceProcess"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGeneratecouponbulkOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGeneratecouponbulk"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodRedeemcouponOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceRedeemcoupon"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSubmissionOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSubmission"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSubmissionIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSubmissionIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodRegisterOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceRegister"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGeocodeGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGeocode"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GeocodeLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GeocodeLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UsersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UsersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UsersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UsersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodLogingooglePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLogingoogle"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LogingoogleLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "LogingoogleLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodOrganizationPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOrganization"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateOrganizationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateOrganizationLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodOrganizationIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOrganizationIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateOrganizationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateOrganizationLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodOrganizationIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOrganizationIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateOrganizationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateOrganizationLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodOrganizationIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOrganizationIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateOrganizationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateOrganizationLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodConstantsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceConstants"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DesignationdataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DesignationdataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEducationDashdataGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEducationDashdata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "EducationdataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "EducationdataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodLanguagesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLanguages"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LanguagesdataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "LanguagesdataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodOtpCreatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOtpCreate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateOTPLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateOTPLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodOtpVerifyPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOtpVerify"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetOTPLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetOTPLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSubscriptionPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSubscription"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SubscriptionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SubscriptionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSubscriptionFirebaseuidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSubscriptionFirebaseuidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SubscriptionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SubscriptionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodProcessPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProcess"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CostLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CostLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodGeneratecouponbulkPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGeneratecouponbulk"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CouponLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CouponLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRedeemcouponPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRedeemcoupon"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CouponLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CouponLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSubmissionPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSubmission"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReferralSubmissionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ReferralSubmissionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSubmissionIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSubmissionIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReferralSubmissionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ReferralSubmissionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRegisterPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRegister"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReferralRegistrationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ReferralRegistrationLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1743788100890": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "staging"
      },
      "DependsOn": [
        "ApiGatewayMethodGeocodeOptions",
        "ApiGatewayMethodOrganizationOptions",
        "ApiGatewayMethodOrganizationIdVarOptions",
        "ApiGatewayMethodConstantsOptions",
        "ApiGatewayMethodOtpCreateOptions",
        "ApiGatewayMethodOtpVerifyOptions",
        "ApiGatewayMethodSubscriptionOptions",
        "ApiGatewayMethodSubscriptionFirebaseuidVarOptions",
        "ApiGatewayMethodProcessOptions",
        "ApiGatewayMethodGeneratecouponbulkOptions",
        "ApiGatewayMethodRedeemcouponOptions",
        "ApiGatewayMethodSubmissionOptions",
        "ApiGatewayMethodSubmissionIdVarOptions",
        "ApiGatewayMethodRegisterOptions",
        "ApiGatewayMethodGeocodeGet",
        "ApiGatewayMethodGeocodeOptions",
        "ApiGatewayMethodUsersPost",
        "ApiGatewayMethodUsersIdVarGet",
        "ApiGatewayMethodUsersIdVarPut",
        "ApiGatewayMethodUsersIdVarDelete",
        "ApiGatewayMethodLogingooglePost",
        "ApiGatewayMethodOrganizationPost",
        "ApiGatewayMethodOrganizationIdVarGet",
        "ApiGatewayMethodOrganizationIdVarPut",
        "ApiGatewayMethodOrganizationIdVarDelete",
        "ApiGatewayMethodConstantsGet",
        "ApiGatewayMethodEducationDashdataGet",
        "ApiGatewayMethodLanguagesGet",
        "ApiGatewayMethodOtpCreatePost",
        "ApiGatewayMethodOtpVerifyPost",
        "ApiGatewayMethodSubscriptionPost",
        "ApiGatewayMethodSubscriptionFirebaseuidVarGet",
        "ApiGatewayMethodProcessPost",
        "ApiGatewayMethodGeneratecouponbulkPost",
        "ApiGatewayMethodRedeemcouponPost",
        "ApiGatewayMethodSubmissionPost",
        "ApiGatewayMethodSubmissionIdVarGet",
        "ApiGatewayMethodRegisterPost"
      ]
    },
    "GeocodeLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GeocodeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UsersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LogingoogleLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LogingoogleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateOrganizationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateOrganizationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DesignationdataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DesignationdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "EducationdataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EducationdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LanguagesdataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LanguagesdataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateOTPLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateOTPLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetOTPLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetOTPLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SubscriptionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubscriptionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CostLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CostLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CouponLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CouponLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ReferralSubmissionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReferralSubmissionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ReferralRegistrationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReferralRegistrationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "teacherlink-deployments-ap-south-1",
      "Export": {
        "Name": "sls-teacher-link-staging-ServerlessDeploymentBucketName"
      }
    },
    "GeocodeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GeocodeLambdaVersionVNvUaThzPm3flwKKfHUqfkUtcFp455wybCUkGTJ7Q"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-GeocodeLambdaFunctionQualifiedArn"
      }
    },
    "UsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UsersLambdaVersionYymBTpbKv0TEJtXjj0qUfTJSe9dV8sLxUYZEJxLx6g"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-UsersLambdaFunctionQualifiedArn"
      }
    },
    "LogingoogleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LogingoogleLambdaVersionA5WVSLcK2mVG2ptOX7vCezkaX3sYFQMqmRlPFDxM"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-LogingoogleLambdaFunctionQualifiedArn"
      }
    },
    "CreateOrganizationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateOrganizationLambdaVersionv5s3vCZ5PIQHp4Yq3g7Nx9S1G3OwKACTaGOjSjI0w"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-CreateOrganizationLambdaFunctionQualifiedArn"
      }
    },
    "DesignationdataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DesignationdataLambdaVersionzbvCUoIcMjG3VeoatwH3ZKGohdpZqB3yPRy95HRZ8"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-DesignationdataLambdaFunctionQualifiedArn"
      }
    },
    "EducationdataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EducationdataLambdaVersioncoTKS7MAzTOTAvfwOopn0RmtQ7QPCtumNkM03EZpZE"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-EducationdataLambdaFunctionQualifiedArn"
      }
    },
    "LanguagesdataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LanguagesdataLambdaVersiontXlMYMCWTWK3NOWpi83FcuOxvyFSEUOHY1itmItJ5g"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-LanguagesdataLambdaFunctionQualifiedArn"
      }
    },
    "CreateOTPLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateOTPLambdaVersionfX5mml7dnePe9eHIAXekHxNZhwffoh5eHZMwd4CaV3s"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-CreateOTPLambdaFunctionQualifiedArn"
      }
    },
    "GetOTPLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetOTPLambdaVersion8xE9oCXmI1OCPIf6o8AeqPRwljWzES6OQa2H5fB0fY"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-GetOTPLambdaFunctionQualifiedArn"
      }
    },
    "SubscriptionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubscriptionLambdaVersionXX8d3GgCdzzIiphe5iqvzhyGZ0ZCy8ZEVEBBQdPP6Q"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-SubscriptionLambdaFunctionQualifiedArn"
      }
    },
    "CostLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CostLambdaVersionBnxU2PPRYWJN8Ock1wqxBIQXuQaf0x0xUCmu1JBVljo"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-CostLambdaFunctionQualifiedArn"
      }
    },
    "CouponLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CouponLambdaVersion0PIY8fmdPOrKVlH5Nt80vv352LCykE0Q8jB37Tsmn8"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-CouponLambdaFunctionQualifiedArn"
      }
    },
    "ReferralSubmissionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ReferralSubmissionLambdaVersionrjziwYptQMaJr1RXcaW7wZuAqbBZxzoeiaUnEw"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-ReferralSubmissionLambdaFunctionQualifiedArn"
      }
    },
    "ReferralRegistrationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ReferralRegistrationLambdaVersionxrqreoHZL9aRs4IpyTcdJOe2rWjJcJ2LLRQZbPY5xfI"
      },
      "Export": {
        "Name": "sls-teacher-link-staging-ReferralRegistrationLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/staging"
          ]
        ]
      },
      "Export": {
        "Name": "sls-teacher-link-staging-ServiceEndpoint"
      }
    }
  }
}