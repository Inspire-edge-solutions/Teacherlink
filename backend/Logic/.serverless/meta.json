{
  "C:\\Users\\DELL\\Desktop\\Teacherlink\\backend\\Logic\\serverless.yml": {
    "versionFramework": "4.7.0",
    "servicePath": "C:\\Users\\DELL\\Desktop\\Teacherlink\\backend\\Logic\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "teacher-link",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "stage": "staging",
        "region": "ap-south-1",
        "deploymentBucket": "teacherlink-deployments-ap-south-1",
        "environment": {
          "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
          "DB_USER": "teacherlink_user",
          "DB_PASSWORD": "<REDACTED>",
          "DB_NAME": "teacherlink",
          "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
          "S3_BUCKET": "${var.S3_BUCKET}",
          "AWS_LOCATION_API_KEY": "<REDACTED>",
          "FIREBASE_API_KEY": "<REDACTED>"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:PutItem",
              "dynamodb:GetItem",
              "dynamodb:UpdateItem",
              "dynamodb:DeleteItem",
              "dynamodb:Scan",
              "dynamodb:Query",
              "s3:PutObject",
              "s3:GetObject",
              "s3:DeleteObject",
              "geo:SearchPlaceIndexForText"
            ],
            "Resource": [
              "arn:aws:dynamodb:ap-south-1:*:table/${var.DYNAMODB_TABLE}",
              "arn:aws:s3:::${var.S3_BUCKET}/*",
              "arn:aws:geo:ap-south-1:*:place-index/TeacherLinkPlaceIndex"
            ]
          }
        ],
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "secretsmanager:GetSecretValue"
                ],
                "Resource": "arn:aws:secretsmanager:ap-south-1:*:secret:teacherlink-*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject",
                  "s3:PutObject",
                  "s3:ListBucket"
                ],
                "Resource": [
                  "arn:aws:s3:::teacherlink",
                  "arn:aws:s3:::teacherlink/*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "rds-db:connect"
                ],
                "Resource": "arn:aws:rds-db:ap-south-1:*:dbuser:*/teacherlink_user"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "cloudformation:*",
                  "apigateway:*",
                  "lambda:*",
                  "logs:*"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "geo:SearchPlaceIndexForText"
                ],
                "Resource": "arn:aws:geo:ap-south-1:*:place-index/TeacherLinkPlaceIndex"
              }
            ]
          }
        },
        "versionFunctions": true,
        "deploymentBucketObject": {
          "name": "teacherlink-deployments-ap-south-1"
        },
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GeocodeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/teacher-link-staging-geocode"
              }
            },
            "UsersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/teacher-link-staging-users"
              }
            },
            "LogingoogleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/teacher-link-staging-logingoogle"
              }
            },
            "CreateOrganizationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/teacher-link-staging-createOrganization"
              }
            },
            "DesignationdataLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/teacher-link-staging-Designationdata"
              }
            },
            "EducationdataLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/teacher-link-staging-Educationdata"
              }
            },
            "LanguagesdataLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/teacher-link-staging-Languagesdata"
              }
            },
            "CreateOTPLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/teacher-link-staging-createOTP"
              }
            },
            "GetOTPLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/teacher-link-staging-getOTP"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "teacher-link",
                          "staging",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/teacher-link-staging*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/teacher-link-staging*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "secretsmanager:GetSecretValue"
                          ],
                          "Resource": "arn:aws:secretsmanager:ap-south-1:*:secret:teacherlink-*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:GetObject",
                            "s3:PutObject",
                            "s3:ListBucket"
                          ],
                          "Resource": [
                            "arn:aws:s3:::teacherlink",
                            "arn:aws:s3:::teacherlink/*"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "rds-db:connect"
                          ],
                          "Resource": "arn:aws:rds-db:ap-south-1:*:dbuser:*/teacherlink_user"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "cloudformation:*",
                            "apigateway:*",
                            "lambda:*",
                            "logs:*"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "geo:SearchPlaceIndexForText"
                          ],
                          "Resource": "arn:aws:geo:ap-south-1:*:place-index/TeacherLinkPlaceIndex"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "teacher-link",
                      "staging",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GeocodeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "teacherlink-deployments-ap-south-1",
                  "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
                },
                "Handler": "src/handlers/geocoding.geocodeLocation",
                "Runtime": "nodejs18.x",
                "FunctionName": "teacher-link-staging-geocode",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                    "DB_USER": "teacherlink_user",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "teacherlink",
                    "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                    "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                    "S3_BUCKET": "${var.S3_BUCKET}",
                    "AWS_LOCATION_API_KEY": "<REDACTED>",
                    "FIREBASE_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GeocodeLogGroup"
              ]
            },
            "UsersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "teacherlink-deployments-ap-south-1",
                  "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
                },
                "Handler": "src/handlers/users.lambdaHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "teacher-link-staging-users",
                "MemorySize": 1024,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                    "DB_USER": "teacherlink_user",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "teacherlink",
                    "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                    "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                    "S3_BUCKET": "${var.S3_BUCKET}",
                    "AWS_LOCATION_API_KEY": "<REDACTED>",
                    "FIREBASE_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UsersLogGroup"
              ]
            },
            "LogingoogleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "teacherlink-deployments-ap-south-1",
                  "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
                },
                "Handler": "src/handlers/logingoogle.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "teacher-link-staging-logingoogle",
                "MemorySize": 1024,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                    "DB_USER": "teacherlink_user",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "teacherlink",
                    "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                    "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                    "S3_BUCKET": "${var.S3_BUCKET}",
                    "AWS_LOCATION_API_KEY": "<REDACTED>",
                    "FIREBASE_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "LogingoogleLogGroup"
              ]
            },
            "CreateOrganizationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "teacherlink-deployments-ap-south-1",
                  "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
                },
                "Handler": "src/handlers/organization.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "teacher-link-staging-createOrganization",
                "MemorySize": 1024,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                    "DB_USER": "teacherlink_user",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "teacherlink",
                    "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                    "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                    "S3_BUCKET": "${var.S3_BUCKET}",
                    "AWS_LOCATION_API_KEY": "<REDACTED>",
                    "FIREBASE_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateOrganizationLogGroup"
              ]
            },
            "DesignationdataLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "teacherlink-deployments-ap-south-1",
                  "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
                },
                "Handler": "src/handlers/handler.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "teacher-link-staging-Designationdata",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                    "DB_USER": "teacherlink_user",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "teacherlink",
                    "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                    "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                    "S3_BUCKET": "${var.S3_BUCKET}",
                    "AWS_LOCATION_API_KEY": "<REDACTED>",
                    "FIREBASE_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DesignationdataLogGroup"
              ]
            },
            "EducationdataLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "teacherlink-deployments-ap-south-1",
                  "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
                },
                "Handler": "src/handlers/Education.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "teacher-link-staging-Educationdata",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                    "DB_USER": "teacherlink_user",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "teacherlink",
                    "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                    "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                    "S3_BUCKET": "${var.S3_BUCKET}",
                    "AWS_LOCATION_API_KEY": "<REDACTED>",
                    "FIREBASE_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EducationdataLogGroup"
              ]
            },
            "LanguagesdataLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "teacherlink-deployments-ap-south-1",
                  "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
                },
                "Handler": "src/handlers/languages.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "teacher-link-staging-Languagesdata",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                    "DB_USER": "teacherlink_user",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "teacherlink",
                    "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                    "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                    "S3_BUCKET": "${var.S3_BUCKET}",
                    "AWS_LOCATION_API_KEY": "<REDACTED>",
                    "FIREBASE_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "LanguagesdataLogGroup"
              ]
            },
            "CreateOTPLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "teacherlink-deployments-ap-south-1",
                  "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
                },
                "Handler": "src/handlers/createOTP.createOTP",
                "Runtime": "nodejs18.x",
                "FunctionName": "teacher-link-staging-createOTP",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                    "DB_USER": "teacherlink_user",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "teacherlink",
                    "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                    "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                    "S3_BUCKET": "${var.S3_BUCKET}",
                    "AWS_LOCATION_API_KEY": "<REDACTED>",
                    "FIREBASE_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateOTPLogGroup"
              ]
            },
            "GetOTPLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "teacherlink-deployments-ap-south-1",
                  "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
                },
                "Handler": "src/handlers/getOTP.getOTP",
                "Runtime": "nodejs18.x",
                "FunctionName": "teacher-link-staging-getOTP",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                    "DB_USER": "teacherlink_user",
                    "DB_PASSWORD": "<REDACTED>",
                    "DB_NAME": "teacherlink",
                    "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                    "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                    "S3_BUCKET": "${var.S3_BUCKET}",
                    "AWS_LOCATION_API_KEY": "<REDACTED>",
                    "FIREBASE_API_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetOTPLogGroup"
              ]
            },
            "GeocodeLambdaVersiongziZRv2xvJrm4s8jmjxo5xXtGyY2TRFzXO1obOg4KA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GeocodeLambdaFunction"
                },
                "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
              }
            },
            "UsersLambdaVersionvDNelS3UHP6JmSaeVlNHN4NTpwblIpetqFr3xCl7M": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UsersLambdaFunction"
                },
                "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
              }
            },
            "LogingoogleLambdaVersionaNVXtWtSW4uexEZ4PsSq33FfB5kmJxe7aDuE0Mq6hf4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LogingoogleLambdaFunction"
                },
                "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
              }
            },
            "CreateOrganizationLambdaVersionCd1c9rm0GjKqh7y1QEWsslgAjGeKy9Ek11U8gCpRFk4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateOrganizationLambdaFunction"
                },
                "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
              }
            },
            "DesignationdataLambdaVersionnRNsUlwRZjhrdGQ77gEkDF8VRqBEajX2Q2woZXZkwI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DesignationdataLambdaFunction"
                },
                "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
              }
            },
            "EducationdataLambdaVersionJatbiSqQFykoWPxwz621KuEwcl8FhQqSBysnZLg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EducationdataLambdaFunction"
                },
                "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
              }
            },
            "LanguagesdataLambdaVersion2OzDypi0sFFknyIzt10D6lLUwcPe8g2LaaYa0FmYfA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LanguagesdataLambdaFunction"
                },
                "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
              }
            },
            "CreateOTPLambdaVersionR6Qpva35kW1pJGA3n74IVUtPoXRxhAkTN12XB0K5o": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateOTPLambdaFunction"
                },
                "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
              }
            },
            "GetOTPLambdaVersionGi5919cK7bTY2pbXojCd2Nkl2BRjzMClWjjUY81ixY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetOTPLambdaFunction"
                },
                "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "staging-teacher-link",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceGeocode": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "geocode",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "users",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceLogingoogle": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "logingoogle",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceOrganization": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "organization",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceOrganizationIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceOrganization"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceConstants": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "constants",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceEducationDashdata": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "education-data",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceLanguages": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "languages",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceOtp": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "otp",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceOtpCreate": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceOtp"
                },
                "PathPart": "create",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceOtpVerify": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceOtp"
                },
                "PathPart": "verify",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodGeocodeOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "AWS_PROXY",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ],
                  "IntegrationHttpMethod": "POST",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GeocodeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGeocode"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>"
              },
              "DependsOn": [
                "GeocodeLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOrganizationOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOrganization"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodOrganizationIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOrganizationIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodConstantsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceConstants"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodOtpCreateOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOtpCreate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodOtpVerifyOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOtpVerify"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodGeocodeGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGeocode"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GeocodeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GeocodeLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UsersLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UsersLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UsersLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UsersLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UsersLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UsersLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UsersLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UsersLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodLogingooglePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLogingoogle"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "LogingoogleLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "LogingoogleLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOrganizationPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOrganization"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateOrganizationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateOrganizationLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOrganizationIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOrganizationIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateOrganizationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateOrganizationLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOrganizationIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOrganizationIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateOrganizationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateOrganizationLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOrganizationIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOrganizationIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateOrganizationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateOrganizationLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodConstantsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceConstants"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DesignationdataLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DesignationdataLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodEducationDashdataGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEducationDashdata"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "EducationdataLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "EducationdataLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodLanguagesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceLanguages"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "LanguagesdataLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "LanguagesdataLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOtpCreatePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOtpCreate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateOTPLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateOTPLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOtpVerifyPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOtpVerify"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetOTPLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetOTPLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1741429790557": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "staging"
              },
              "DependsOn": [
                "ApiGatewayMethodGeocodeOptions",
                "ApiGatewayMethodOrganizationOptions",
                "ApiGatewayMethodOrganizationIdVarOptions",
                "ApiGatewayMethodConstantsOptions",
                "ApiGatewayMethodOtpCreateOptions",
                "ApiGatewayMethodOtpVerifyOptions",
                "ApiGatewayMethodGeocodeGet",
                "ApiGatewayMethodGeocodeOptions",
                "ApiGatewayMethodUsersPost",
                "ApiGatewayMethodUsersIdVarGet",
                "ApiGatewayMethodUsersIdVarPut",
                "ApiGatewayMethodUsersIdVarDelete",
                "ApiGatewayMethodLogingooglePost",
                "ApiGatewayMethodOrganizationPost",
                "ApiGatewayMethodOrganizationIdVarGet",
                "ApiGatewayMethodOrganizationIdVarPut",
                "ApiGatewayMethodOrganizationIdVarDelete",
                "ApiGatewayMethodConstantsGet",
                "ApiGatewayMethodEducationDashdataGet",
                "ApiGatewayMethodLanguagesGet",
                "ApiGatewayMethodOtpCreatePost",
                "ApiGatewayMethodOtpVerifyPost"
              ]
            },
            "GeocodeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GeocodeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UsersLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UsersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "LogingoogleLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LogingoogleLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateOrganizationLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateOrganizationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DesignationdataLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DesignationdataLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "EducationdataLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EducationdataLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "LanguagesdataLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LanguagesdataLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateOTPLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateOTPLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetOTPLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetOTPLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "teacherlink-deployments-ap-south-1",
              "Export": {
                "Name": "sls-teacher-link-staging-ServerlessDeploymentBucketName"
              }
            },
            "GeocodeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GeocodeLambdaVersiongziZRv2xvJrm4s8jmjxo5xXtGyY2TRFzXO1obOg4KA"
              },
              "Export": {
                "Name": "sls-teacher-link-staging-GeocodeLambdaFunctionQualifiedArn"
              }
            },
            "UsersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UsersLambdaVersionvDNelS3UHP6JmSaeVlNHN4NTpwblIpetqFr3xCl7M"
              },
              "Export": {
                "Name": "sls-teacher-link-staging-UsersLambdaFunctionQualifiedArn"
              }
            },
            "LogingoogleLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LogingoogleLambdaVersionaNVXtWtSW4uexEZ4PsSq33FfB5kmJxe7aDuE0Mq6hf4"
              },
              "Export": {
                "Name": "sls-teacher-link-staging-LogingoogleLambdaFunctionQualifiedArn"
              }
            },
            "CreateOrganizationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateOrganizationLambdaVersionCd1c9rm0GjKqh7y1QEWsslgAjGeKy9Ek11U8gCpRFk4"
              },
              "Export": {
                "Name": "sls-teacher-link-staging-CreateOrganizationLambdaFunctionQualifiedArn"
              }
            },
            "DesignationdataLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DesignationdataLambdaVersionnRNsUlwRZjhrdGQ77gEkDF8VRqBEajX2Q2woZXZkwI"
              },
              "Export": {
                "Name": "sls-teacher-link-staging-DesignationdataLambdaFunctionQualifiedArn"
              }
            },
            "EducationdataLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EducationdataLambdaVersionJatbiSqQFykoWPxwz621KuEwcl8FhQqSBysnZLg"
              },
              "Export": {
                "Name": "sls-teacher-link-staging-EducationdataLambdaFunctionQualifiedArn"
              }
            },
            "LanguagesdataLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LanguagesdataLambdaVersion2OzDypi0sFFknyIzt10D6lLUwcPe8g2LaaYa0FmYfA"
              },
              "Export": {
                "Name": "sls-teacher-link-staging-LanguagesdataLambdaFunctionQualifiedArn"
              }
            },
            "CreateOTPLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateOTPLambdaVersionR6Qpva35kW1pJGA3n74IVUtPoXRxhAkTN12XB0K5o"
              },
              "Export": {
                "Name": "sls-teacher-link-staging-CreateOTPLambdaFunctionQualifiedArn"
              }
            },
            "GetOTPLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetOTPLambdaVersionGi5919cK7bTY2pbXojCd2Nkl2BRjzMClWjjUY81ixY"
              },
              "Export": {
                "Name": "sls-teacher-link-staging-GetOTPLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/staging"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-teacher-link-staging-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "plugins": [
        "serverless-offline",
        "serverless-dotenv-plugin"
      ],
      "custom": {
        "serverless-offline": {
          "httpPort": 3000,
          "noPrependStageInUrl": true,
          "useChildProcesses": true
        }
      },
      "functions": {
        "geocode": {
          "handler": "src/handlers/geocoding.geocodeLocation",
          "events": [
            {
              "http": {
                "path": "geocode",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "geocode",
                "method": "options",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "OPTIONS"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "teacher-link-staging-geocode",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GeocodeLambdaVersiongziZRv2xvJrm4s8jmjxo5xXtGyY2TRFzXO1obOg4KA"
        },
        "users": {
          "handler": "src/handlers/users.lambdaHandler",
          "environment": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_NAME": "teacherlink"
          },
          "timeout": 29,
          "events": [
            {
              "http": {
                "path": "users",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "users/{id}",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "users/{id}",
                "method": "put",
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "users/{id}",
                "method": "delete",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "teacher-link-staging-users",
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UsersLambdaVersionvDNelS3UHP6JmSaeVlNHN4NTpwblIpetqFr3xCl7M"
        },
        "logingoogle": {
          "handler": "src/handlers/logingoogle.handler",
          "environment": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_NAME": "teacherlink"
          },
          "timeout": 29,
          "events": [
            {
              "http": {
                "path": "logingoogle",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "teacher-link-staging-logingoogle",
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "LogingoogleLambdaVersionaNVXtWtSW4uexEZ4PsSq33FfB5kmJxe7aDuE0Mq6hf4"
        },
        "createOrganization": {
          "handler": "src/handlers/organization.handler",
          "environment": {
            "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
            "DB_NAME": "teacherlink"
          },
          "timeout": 29,
          "events": [
            {
              "http": {
                "path": "organization",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "organization/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "organization/{id}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "organization/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "teacher-link-staging-createOrganization",
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateOrganizationLambdaVersionCd1c9rm0GjKqh7y1QEWsslgAjGeKy9Ek11U8gCpRFk4"
        },
        "Designationdata": {
          "handler": "src/handlers/handler.handler",
          "events": [
            {
              "http": {
                "path": "constants",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "teacher-link-staging-Designationdata",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "DesignationdataLambdaVersionnRNsUlwRZjhrdGQ77gEkDF8VRqBEajX2Q2woZXZkwI"
        },
        "Educationdata": {
          "handler": "src/handlers/Education.handler",
          "events": [
            {
              "http": {
                "path": "education-data",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "teacher-link-staging-Educationdata",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "EducationdataLambdaVersionJatbiSqQFykoWPxwz621KuEwcl8FhQqSBysnZLg"
        },
        "Languagesdata": {
          "handler": "src/handlers/languages.handler",
          "events": [
            {
              "http": {
                "path": "languages",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "teacher-link-staging-Languagesdata",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "LanguagesdataLambdaVersion2OzDypi0sFFknyIzt10D6lLUwcPe8g2LaaYa0FmYfA"
        },
        "createOTP": {
          "handler": "src/handlers/createOTP.createOTP",
          "events": [
            {
              "http": {
                "path": "otp/create",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "teacher-link-staging-createOTP",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateOTPLambdaVersionR6Qpva35kW1pJGA3n74IVUtPoXRxhAkTN12XB0K5o"
        },
        "getOTP": {
          "handler": "src/handlers/getOTP.getOTP",
          "events": [
            {
              "http": {
                "path": "otp/verify",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "teacher-link-staging-getOTP",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetOTPLambdaVersionGi5919cK7bTY2pbXojCd2Nkl2BRjzMClWjjUY81ixY"
        }
      },
      "package": {
        "exclude": [
          "test/**",
          ".git/**",
          "README.md"
        ],
        "artifactsS3KeyDirname": "serverless/teacher-link/staging/code-artifacts",
        "deploymentBucket": "teacherlink-deployments-ap-south-1",
        "artifact": "C:\\Users\\DELL\\Desktop\\Teacherlink\\backend\\Logic\\.serverless\\teacher-link.zip",
        "artifactDirectoryName": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z"
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "stage": "staging",
      "region": "ap-south-1",
      "deploymentBucket": "teacherlink-deployments-ap-south-1",
      "environment": {
        "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
        "DB_USER": "teacherlink_user",
        "DB_PASSWORD": "<REDACTED>",
        "DB_NAME": "teacherlink",
        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
        "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
        "S3_BUCKET": "${var.S3_BUCKET}",
        "AWS_LOCATION_API_KEY": "<REDACTED>",
        "FIREBASE_API_KEY": "<REDACTED>"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem",
            "dynamodb:GetItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "dynamodb:Scan",
            "dynamodb:Query",
            "s3:PutObject",
            "s3:GetObject",
            "s3:DeleteObject",
            "geo:SearchPlaceIndexForText"
          ],
          "Resource": [
            "arn:aws:dynamodb:ap-south-1:*:table/${var.DYNAMODB_TABLE}",
            "arn:aws:s3:::${var.S3_BUCKET}/*",
            "arn:aws:geo:ap-south-1:*:place-index/TeacherLinkPlaceIndex"
          ]
        }
      ],
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": "arn:aws:secretsmanager:ap-south-1:*:secret:teacherlink-*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:ListBucket"
              ],
              "Resource": [
                "arn:aws:s3:::teacherlink",
                "arn:aws:s3:::teacherlink/*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "rds-db:connect"
              ],
              "Resource": "arn:aws:rds-db:ap-south-1:*:dbuser:*/teacherlink_user"
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:*",
                "apigateway:*",
                "lambda:*",
                "logs:*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "geo:SearchPlaceIndexForText"
              ],
              "Resource": "arn:aws:geo:ap-south-1:*:place-index/TeacherLinkPlaceIndex"
            }
          ]
        }
      },
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "teacherlink-deployments-ap-south-1"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GeocodeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/teacher-link-staging-geocode"
            }
          },
          "UsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/teacher-link-staging-users"
            }
          },
          "LogingoogleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/teacher-link-staging-logingoogle"
            }
          },
          "CreateOrganizationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/teacher-link-staging-createOrganization"
            }
          },
          "DesignationdataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/teacher-link-staging-Designationdata"
            }
          },
          "EducationdataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/teacher-link-staging-Educationdata"
            }
          },
          "LanguagesdataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/teacher-link-staging-Languagesdata"
            }
          },
          "CreateOTPLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/teacher-link-staging-createOTP"
            }
          },
          "GetOTPLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/teacher-link-staging-getOTP"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "teacher-link",
                        "staging",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/teacher-link-staging*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/teacher-link-staging*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "secretsmanager:GetSecretValue"
                        ],
                        "Resource": "arn:aws:secretsmanager:ap-south-1:*:secret:teacherlink-*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject",
                          "s3:PutObject",
                          "s3:ListBucket"
                        ],
                        "Resource": [
                          "arn:aws:s3:::teacherlink",
                          "arn:aws:s3:::teacherlink/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "rds-db:connect"
                        ],
                        "Resource": "arn:aws:rds-db:ap-south-1:*:dbuser:*/teacherlink_user"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "cloudformation:*",
                          "apigateway:*",
                          "lambda:*",
                          "logs:*"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "geo:SearchPlaceIndexForText"
                        ],
                        "Resource": "arn:aws:geo:ap-south-1:*:place-index/TeacherLinkPlaceIndex"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "teacher-link",
                    "staging",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GeocodeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "teacherlink-deployments-ap-south-1",
                "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
              },
              "Handler": "src/handlers/geocoding.geocodeLocation",
              "Runtime": "nodejs18.x",
              "FunctionName": "teacher-link-staging-geocode",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                  "DB_USER": "teacherlink_user",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "teacherlink",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                  "S3_BUCKET": "${var.S3_BUCKET}",
                  "AWS_LOCATION_API_KEY": "<REDACTED>",
                  "FIREBASE_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GeocodeLogGroup"
            ]
          },
          "UsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "teacherlink-deployments-ap-south-1",
                "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
              },
              "Handler": "src/handlers/users.lambdaHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "teacher-link-staging-users",
              "MemorySize": 1024,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                  "DB_USER": "teacherlink_user",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "teacherlink",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                  "S3_BUCKET": "${var.S3_BUCKET}",
                  "AWS_LOCATION_API_KEY": "<REDACTED>",
                  "FIREBASE_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UsersLogGroup"
            ]
          },
          "LogingoogleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "teacherlink-deployments-ap-south-1",
                "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
              },
              "Handler": "src/handlers/logingoogle.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "teacher-link-staging-logingoogle",
              "MemorySize": 1024,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                  "DB_USER": "teacherlink_user",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "teacherlink",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                  "S3_BUCKET": "${var.S3_BUCKET}",
                  "AWS_LOCATION_API_KEY": "<REDACTED>",
                  "FIREBASE_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LogingoogleLogGroup"
            ]
          },
          "CreateOrganizationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "teacherlink-deployments-ap-south-1",
                "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
              },
              "Handler": "src/handlers/organization.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "teacher-link-staging-createOrganization",
              "MemorySize": 1024,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                  "DB_USER": "teacherlink_user",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "teacherlink",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                  "S3_BUCKET": "${var.S3_BUCKET}",
                  "AWS_LOCATION_API_KEY": "<REDACTED>",
                  "FIREBASE_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateOrganizationLogGroup"
            ]
          },
          "DesignationdataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "teacherlink-deployments-ap-south-1",
                "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
              },
              "Handler": "src/handlers/handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "teacher-link-staging-Designationdata",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                  "DB_USER": "teacherlink_user",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "teacherlink",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                  "S3_BUCKET": "${var.S3_BUCKET}",
                  "AWS_LOCATION_API_KEY": "<REDACTED>",
                  "FIREBASE_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DesignationdataLogGroup"
            ]
          },
          "EducationdataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "teacherlink-deployments-ap-south-1",
                "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
              },
              "Handler": "src/handlers/Education.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "teacher-link-staging-Educationdata",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                  "DB_USER": "teacherlink_user",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "teacherlink",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                  "S3_BUCKET": "${var.S3_BUCKET}",
                  "AWS_LOCATION_API_KEY": "<REDACTED>",
                  "FIREBASE_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EducationdataLogGroup"
            ]
          },
          "LanguagesdataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "teacherlink-deployments-ap-south-1",
                "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
              },
              "Handler": "src/handlers/languages.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "teacher-link-staging-Languagesdata",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                  "DB_USER": "teacherlink_user",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "teacherlink",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                  "S3_BUCKET": "${var.S3_BUCKET}",
                  "AWS_LOCATION_API_KEY": "<REDACTED>",
                  "FIREBASE_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LanguagesdataLogGroup"
            ]
          },
          "CreateOTPLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "teacherlink-deployments-ap-south-1",
                "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
              },
              "Handler": "src/handlers/createOTP.createOTP",
              "Runtime": "nodejs18.x",
              "FunctionName": "teacher-link-staging-createOTP",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                  "DB_USER": "teacherlink_user",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "teacherlink",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                  "S3_BUCKET": "${var.S3_BUCKET}",
                  "AWS_LOCATION_API_KEY": "<REDACTED>",
                  "FIREBASE_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateOTPLogGroup"
            ]
          },
          "GetOTPLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "teacherlink-deployments-ap-south-1",
                "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
              },
              "Handler": "src/handlers/getOTP.getOTP",
              "Runtime": "nodejs18.x",
              "FunctionName": "teacher-link-staging-getOTP",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                  "DB_USER": "teacherlink_user",
                  "DB_PASSWORD": "<REDACTED>",
                  "DB_NAME": "teacherlink",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                  "S3_BUCKET": "${var.S3_BUCKET}",
                  "AWS_LOCATION_API_KEY": "<REDACTED>",
                  "FIREBASE_API_KEY": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOTPLogGroup"
            ]
          },
          "GeocodeLambdaVersiongziZRv2xvJrm4s8jmjxo5xXtGyY2TRFzXO1obOg4KA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GeocodeLambdaFunction"
              },
              "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
            }
          },
          "UsersLambdaVersionvDNelS3UHP6JmSaeVlNHN4NTpwblIpetqFr3xCl7M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UsersLambdaFunction"
              },
              "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
            }
          },
          "LogingoogleLambdaVersionaNVXtWtSW4uexEZ4PsSq33FfB5kmJxe7aDuE0Mq6hf4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LogingoogleLambdaFunction"
              },
              "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
            }
          },
          "CreateOrganizationLambdaVersionCd1c9rm0GjKqh7y1QEWsslgAjGeKy9Ek11U8gCpRFk4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateOrganizationLambdaFunction"
              },
              "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
            }
          },
          "DesignationdataLambdaVersionnRNsUlwRZjhrdGQ77gEkDF8VRqBEajX2Q2woZXZkwI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DesignationdataLambdaFunction"
              },
              "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
            }
          },
          "EducationdataLambdaVersionJatbiSqQFykoWPxwz621KuEwcl8FhQqSBysnZLg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EducationdataLambdaFunction"
              },
              "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
            }
          },
          "LanguagesdataLambdaVersion2OzDypi0sFFknyIzt10D6lLUwcPe8g2LaaYa0FmYfA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LanguagesdataLambdaFunction"
              },
              "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
            }
          },
          "CreateOTPLambdaVersionR6Qpva35kW1pJGA3n74IVUtPoXRxhAkTN12XB0K5o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateOTPLambdaFunction"
              },
              "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
            }
          },
          "GetOTPLambdaVersionGi5919cK7bTY2pbXojCd2Nkl2BRjzMClWjjUY81ixY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOTPLambdaFunction"
              },
              "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "staging-teacher-link",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceGeocode": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "geocode",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLogingoogle": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "logingoogle",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrganization": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "organization",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrganizationIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOrganization"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceConstants": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "constants",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEducationDashdata": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "education-data",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLanguages": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "languages",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOtp": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "otp",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOtpCreate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOtp"
              },
              "PathPart": "create",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOtpVerify": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOtp"
              },
              "PathPart": "verify",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGeocodeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "AWS_PROXY",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ],
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GeocodeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGeocode"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>"
            },
            "DependsOn": [
              "GeocodeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOrganizationOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrganization"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOrganizationIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrganizationIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodConstantsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceConstants"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOtpCreateOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceOtpCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOtpVerifyOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceOtpVerify"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGeocodeGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGeocode"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GeocodeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GeocodeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLogingooglePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogingoogle"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LogingoogleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LogingoogleLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOrganizationPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrganization"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateOrganizationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateOrganizationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOrganizationIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrganizationIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateOrganizationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateOrganizationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOrganizationIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrganizationIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateOrganizationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateOrganizationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOrganizationIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrganizationIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateOrganizationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateOrganizationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodConstantsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceConstants"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DesignationdataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DesignationdataLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEducationDashdataGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEducationDashdata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "EducationdataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "EducationdataLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLanguagesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLanguages"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LanguagesdataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LanguagesdataLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOtpCreatePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOtpCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateOTPLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateOTPLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOtpVerifyPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOtpVerify"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOTPLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetOTPLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1741429790557": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "staging"
            },
            "DependsOn": [
              "ApiGatewayMethodGeocodeOptions",
              "ApiGatewayMethodOrganizationOptions",
              "ApiGatewayMethodOrganizationIdVarOptions",
              "ApiGatewayMethodConstantsOptions",
              "ApiGatewayMethodOtpCreateOptions",
              "ApiGatewayMethodOtpVerifyOptions",
              "ApiGatewayMethodGeocodeGet",
              "ApiGatewayMethodGeocodeOptions",
              "ApiGatewayMethodUsersPost",
              "ApiGatewayMethodUsersIdVarGet",
              "ApiGatewayMethodUsersIdVarPut",
              "ApiGatewayMethodUsersIdVarDelete",
              "ApiGatewayMethodLogingooglePost",
              "ApiGatewayMethodOrganizationPost",
              "ApiGatewayMethodOrganizationIdVarGet",
              "ApiGatewayMethodOrganizationIdVarPut",
              "ApiGatewayMethodOrganizationIdVarDelete",
              "ApiGatewayMethodConstantsGet",
              "ApiGatewayMethodEducationDashdataGet",
              "ApiGatewayMethodLanguagesGet",
              "ApiGatewayMethodOtpCreatePost",
              "ApiGatewayMethodOtpVerifyPost"
            ]
          },
          "GeocodeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GeocodeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LogingoogleLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LogingoogleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateOrganizationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateOrganizationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DesignationdataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DesignationdataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "EducationdataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EducationdataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LanguagesdataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LanguagesdataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateOTPLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateOTPLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOTPLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOTPLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "teacherlink-deployments-ap-south-1",
            "Export": {
              "Name": "sls-teacher-link-staging-ServerlessDeploymentBucketName"
            }
          },
          "GeocodeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GeocodeLambdaVersiongziZRv2xvJrm4s8jmjxo5xXtGyY2TRFzXO1obOg4KA"
            },
            "Export": {
              "Name": "sls-teacher-link-staging-GeocodeLambdaFunctionQualifiedArn"
            }
          },
          "UsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UsersLambdaVersionvDNelS3UHP6JmSaeVlNHN4NTpwblIpetqFr3xCl7M"
            },
            "Export": {
              "Name": "sls-teacher-link-staging-UsersLambdaFunctionQualifiedArn"
            }
          },
          "LogingoogleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LogingoogleLambdaVersionaNVXtWtSW4uexEZ4PsSq33FfB5kmJxe7aDuE0Mq6hf4"
            },
            "Export": {
              "Name": "sls-teacher-link-staging-LogingoogleLambdaFunctionQualifiedArn"
            }
          },
          "CreateOrganizationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateOrganizationLambdaVersionCd1c9rm0GjKqh7y1QEWsslgAjGeKy9Ek11U8gCpRFk4"
            },
            "Export": {
              "Name": "sls-teacher-link-staging-CreateOrganizationLambdaFunctionQualifiedArn"
            }
          },
          "DesignationdataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DesignationdataLambdaVersionnRNsUlwRZjhrdGQ77gEkDF8VRqBEajX2Q2woZXZkwI"
            },
            "Export": {
              "Name": "sls-teacher-link-staging-DesignationdataLambdaFunctionQualifiedArn"
            }
          },
          "EducationdataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EducationdataLambdaVersionJatbiSqQFykoWPxwz621KuEwcl8FhQqSBysnZLg"
            },
            "Export": {
              "Name": "sls-teacher-link-staging-EducationdataLambdaFunctionQualifiedArn"
            }
          },
          "LanguagesdataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LanguagesdataLambdaVersion2OzDypi0sFFknyIzt10D6lLUwcPe8g2LaaYa0FmYfA"
            },
            "Export": {
              "Name": "sls-teacher-link-staging-LanguagesdataLambdaFunctionQualifiedArn"
            }
          },
          "CreateOTPLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateOTPLambdaVersionR6Qpva35kW1pJGA3n74IVUtPoXRxhAkTN12XB0K5o"
            },
            "Export": {
              "Name": "sls-teacher-link-staging-CreateOTPLambdaFunctionQualifiedArn"
            }
          },
          "GetOTPLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOTPLambdaVersionGi5919cK7bTY2pbXojCd2Nkl2BRjzMClWjjUY81ixY"
            },
            "Export": {
              "Name": "sls-teacher-link-staging-GetOTPLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/staging"
                ]
              ]
            },
            "Export": {
              "Name": "sls-teacher-link-staging-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: teacher-link\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x\r\n  stage: ${opt:stage, 'staging'}\r\n  region: ap-south-1\r\n  deploymentBucket:\r\n    name: teacherlink-deployments-ap-south-1  # Your S3 bucket for deployments\r\n  environment:\r\n    DB_HOST: ${var.DB_HOST}\r\n    DB_USER: ${var.DB_USER}\r\n    DB_PASSWORD: ${var.DB_PASSWORD}\r\n    DB_NAME: ${var.DB_NAME}\r\n    AWS_NODEJS_CONNECTION_REUSE_ENABLED: ${var.AWS_NODEJS_CONNECTION_REUSE_ENABLED}\r\n    DYNAMODB_TABLE: ${var.DYNAMODB_TABLE}\r\n    S3_BUCKET: ${var.S3_BUCKET}\r\n    AWS_LOCATION_API_KEY: ${env:AWS_LOCATION_API_KEY}\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:PutItem\r\n        - dynamodb:GetItem\r\n        - dynamodb:UpdateItem\r\n        - dynamodb:DeleteItem\r\n        - dynamodb:Scan\r\n        - dynamodb:Query\r\n        - s3:PutObject\r\n        - s3:GetObject\r\n        - s3:DeleteObject\r\n        - geo:SearchPlaceIndexForText\r\n      Resource:\r\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\r\n        - arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*\r\n        - arn:aws:geo:${self:provider.region}:*:place-index/TeacherLinkPlaceIndex\r\n\r\n  iam:\r\n    role:\r\n      statements:\r\n        # Allow Secrets Manager access\r\n        - Effect: Allow\r\n          Action:\r\n            - secretsmanager:GetSecretValue\r\n          Resource: arn:aws:secretsmanager:ap-south-1:*:secret:teacherlink-*\r\n\r\n        # Allow S3 access\r\n        - Effect: Allow\r\n          Action:\r\n            - s3:GetObject\r\n            - s3:PutObject\r\n            - s3:ListBucket\r\n          Resource:\r\n            - arn:aws:s3:::teacherlink\r\n            - arn:aws:s3:::teacherlink/*\r\n\r\n        # Allow RDS connection\r\n        - Effect: Allow\r\n          Action:\r\n            - rds-db:connect\r\n          Resource: arn:aws:rds-db:ap-south-1:*:dbuser:*/teacherlink_user\r\n\r\n        # Allow CloudFormation, API Gateway, Lambda, and Logs\r\n        - Effect: Allow\r\n          Action:\r\n            - cloudformation:*\r\n            - apigateway:*\r\n            - lambda:*\r\n            - logs:*\r\n          Resource: \"*\"\r\n\r\n        # Allow AWS Location Service access (for geocoding / Google Maps alternative)\r\n        - Effect: Allow\r\n          Action:\r\n            - geo:SearchPlaceIndexForText\r\n          Resource: arn:aws:geo:${self:provider.region}:*:place-index/TeacherLinkPlaceIndex\r\n\r\nplugins:\r\n  - serverless-offline\r\n  - serverless-dotenv-plugin\r\n\r\ncustom:\r\n  serverless-offline:\r\n    httpPort: 3000\r\n    noPrependStageInUrl: true\r\n    useChildProcesses: true\r\n\r\nfunctions:\r\n  geocode:\r\n    handler: src/handlers/geocoding.geocodeLocation\r\n    events:\r\n      - http:\r\n          path: /geocode\r\n          method: get\r\n          cors: true\r\n      - http:\r\n          path: /geocode\r\n          method: options\r\n          cors: true\r\n\r\n  users:\r\n    handler: src/handlers/users.lambdaHandler\r\n    environment: ${file(src/env/${self:provider.stage}.yml)}\r\n    timeout: 29\r\n    events:\r\n      - http:\r\n          path: users\r\n          method: POST\r\n      - http:\r\n          path: users/{id}\r\n          method: GET\r\n      - http:\r\n          path: users/{id}\r\n          method: PUT\r\n      - http:\r\n          path: users/{id}\r\n          method: DELETE\r\n\r\n  logingoogle:\r\n    handler: src/handlers/logingoogle.handler\r\n    environment: ${file(src/env/${self:provider.stage}.yml)}\r\n    timeout: 29\r\n    events:\r\n      - http:\r\n          path: logingoogle\r\n          method: post\r\n\r\n  createOrganization:\r\n    handler: src/handlers/organization.handler\r\n    environment: ${file(src/env/${self:provider.stage}.yml)}\r\n    timeout: 29\r\n    events:\r\n      - http:\r\n          path: organization\r\n          method: post\r\n          cors: true\r\n          \r\n      - http:\r\n          path: organization/{id}\r\n          method: get\r\n          cors: true\r\n      - http:\r\n          path: organization/{id}\r\n          method: put\r\n          cors: true\r\n      - http:\r\n          path: organization/{id}\r\n          method: delete\r\n          cors: true\r\n\r\n  Designationdata:\r\n    handler: src/handlers/handler.handler\r\n    events:\r\n      - http:\r\n          path: constants\r\n          method: get\r\n          cors: true\r\n\r\n  Educationdata:\r\n    handler: src/handlers/Education.handler\r\n    events:\r\n      - http:\r\n          path: education-data\r\n          method: get\r\n      \r\n  Languagesdata:\r\n    handler: src/handlers/languages.handler\r\n    events:\r\n      - http:\r\n          path: languages\r\n          method: get\r\n\r\n  createOTP:\r\n    handler: src/handlers/createOTP.createOTP\r\n    events:\r\n      - http:\r\n          path: otp/create\r\n          method: post\r\n          cors: true\r\n  \r\n  getOTP:\r\n    handler: src/handlers/getOTP.getOTP\r\n    events:\r\n      - http:\r\n          path: otp/verify\r\n          method: post\r\n          cors: true\r\n\r\npackage:\r\n  exclude:\r\n    - test/**\r\n    - .git/**\r\n    - README.md\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "6e370299-c638-4a3e-90ef-0dfabc65140b",
    "orgName": "teacherlink",
    "userId": "Gk42CfhQXSqCCTzcWx",
    "userName": "teacherlink",
    "serviceProviderAwsAccountId": "034362065816",
    "serviceProviderAwsCfStackName": "teacher-link-staging",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-south-1:034362065816:stack/teacher-link-staging/9092ea90-f74b-11ef-86b6-020ab519482b",
    "serviceProviderAwsCfStackCreated": "2025-03-02T09:48:59.323Z",
    "serviceProviderAwsCfStackUpdated": "2025-03-08T09:45:10.760Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "EducationdataLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:034362065816:function:teacher-link-staging-Educationdata:179",
        "Description": "Current Lambda function version",
        "ExportName": "sls-teacher-link-staging-EducationdataLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetOTPLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:034362065816:function:teacher-link-staging-getOTP:65",
        "Description": "Current Lambda function version",
        "ExportName": "sls-teacher-link-staging-GetOTPLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateOTPLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:034362065816:function:teacher-link-staging-createOTP:65",
        "Description": "Current Lambda function version",
        "ExportName": "sls-teacher-link-staging-CreateOTPLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "LanguagesdataLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:034362065816:function:teacher-link-staging-Languagesdata:178",
        "Description": "Current Lambda function version",
        "ExportName": "sls-teacher-link-staging-LanguagesdataLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "LogingoogleLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:034362065816:function:teacher-link-staging-logingoogle:107",
        "Description": "Current Lambda function version",
        "ExportName": "sls-teacher-link-staging-LogingoogleLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateOrganizationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:034362065816:function:teacher-link-staging-createOrganization:209",
        "Description": "Current Lambda function version",
        "ExportName": "sls-teacher-link-staging-CreateOrganizationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://0vg0fr4nqc.execute-api.ap-south-1.amazonaws.com/staging",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-teacher-link-staging-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "teacherlink-deployments-ap-south-1",
        "ExportName": "sls-teacher-link-staging-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "GeocodeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:034362065816:function:teacher-link-staging-geocode:18",
        "Description": "Current Lambda function version",
        "ExportName": "sls-teacher-link-staging-GeocodeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UsersLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:034362065816:function:teacher-link-staging-users:239",
        "Description": "Current Lambda function version",
        "ExportName": "sls-teacher-link-staging-UsersLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DesignationdataLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:034362065816:function:teacher-link-staging-Designationdata:178",
        "Description": "Current Lambda function version",
        "ExportName": "sls-teacher-link-staging-DesignationdataLambdaFunctionQualifiedArn"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "GeocodeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/teacher-link-staging-geocode"
          }
        },
        "UsersLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/teacher-link-staging-users"
          }
        },
        "LogingoogleLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/teacher-link-staging-logingoogle"
          }
        },
        "CreateOrganizationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/teacher-link-staging-createOrganization"
          }
        },
        "DesignationdataLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/teacher-link-staging-Designationdata"
          }
        },
        "EducationdataLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/teacher-link-staging-Educationdata"
          }
        },
        "LanguagesdataLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/teacher-link-staging-Languagesdata"
          }
        },
        "CreateOTPLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/teacher-link-staging-createOTP"
          }
        },
        "GetOTPLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/teacher-link-staging-getOTP"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "teacher-link",
                      "staging",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/teacher-link-staging*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/teacher-link-staging*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "secretsmanager:GetSecretValue"
                      ],
                      "Resource": "arn:aws:secretsmanager:ap-south-1:*:secret:teacherlink-*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:ListBucket"
                      ],
                      "Resource": [
                        "arn:aws:s3:::teacherlink",
                        "arn:aws:s3:::teacherlink/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "rds-db:connect"
                      ],
                      "Resource": "arn:aws:rds-db:ap-south-1:*:dbuser:*/teacherlink_user"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "cloudformation:*",
                        "apigateway:*",
                        "lambda:*",
                        "logs:*"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "geo:SearchPlaceIndexForText"
                      ],
                      "Resource": "arn:aws:geo:ap-south-1:*:place-index/TeacherLinkPlaceIndex"
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "teacher-link",
                  "staging",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "GeocodeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "teacherlink-deployments-ap-south-1",
              "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
            },
            "Handler": "src/handlers/geocoding.geocodeLocation",
            "Runtime": "nodejs18.x",
            "FunctionName": "teacher-link-staging-geocode",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                "DB_USER": "teacherlink_user",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "teacherlink",
                "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                "S3_BUCKET": "${var.S3_BUCKET}",
                "AWS_LOCATION_API_KEY": "<REDACTED>",
                "FIREBASE_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GeocodeLogGroup"
          ]
        },
        "UsersLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "teacherlink-deployments-ap-south-1",
              "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
            },
            "Handler": "src/handlers/users.lambdaHandler",
            "Runtime": "nodejs18.x",
            "FunctionName": "teacher-link-staging-users",
            "MemorySize": 1024,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                "DB_USER": "teacherlink_user",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "teacherlink",
                "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                "S3_BUCKET": "${var.S3_BUCKET}",
                "AWS_LOCATION_API_KEY": "<REDACTED>",
                "FIREBASE_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UsersLogGroup"
          ]
        },
        "LogingoogleLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "teacherlink-deployments-ap-south-1",
              "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
            },
            "Handler": "src/handlers/logingoogle.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "teacher-link-staging-logingoogle",
            "MemorySize": 1024,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                "DB_USER": "teacherlink_user",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "teacherlink",
                "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                "S3_BUCKET": "${var.S3_BUCKET}",
                "AWS_LOCATION_API_KEY": "<REDACTED>",
                "FIREBASE_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "LogingoogleLogGroup"
          ]
        },
        "CreateOrganizationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "teacherlink-deployments-ap-south-1",
              "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
            },
            "Handler": "src/handlers/organization.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "teacher-link-staging-createOrganization",
            "MemorySize": 1024,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                "DB_USER": "teacherlink_user",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "teacherlink",
                "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                "S3_BUCKET": "${var.S3_BUCKET}",
                "AWS_LOCATION_API_KEY": "<REDACTED>",
                "FIREBASE_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateOrganizationLogGroup"
          ]
        },
        "DesignationdataLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "teacherlink-deployments-ap-south-1",
              "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
            },
            "Handler": "src/handlers/handler.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "teacher-link-staging-Designationdata",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                "DB_USER": "teacherlink_user",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "teacherlink",
                "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                "S3_BUCKET": "${var.S3_BUCKET}",
                "AWS_LOCATION_API_KEY": "<REDACTED>",
                "FIREBASE_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DesignationdataLogGroup"
          ]
        },
        "EducationdataLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "teacherlink-deployments-ap-south-1",
              "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
            },
            "Handler": "src/handlers/Education.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "teacher-link-staging-Educationdata",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                "DB_USER": "teacherlink_user",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "teacherlink",
                "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                "S3_BUCKET": "${var.S3_BUCKET}",
                "AWS_LOCATION_API_KEY": "<REDACTED>",
                "FIREBASE_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EducationdataLogGroup"
          ]
        },
        "LanguagesdataLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "teacherlink-deployments-ap-south-1",
              "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
            },
            "Handler": "src/handlers/languages.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "teacher-link-staging-Languagesdata",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                "DB_USER": "teacherlink_user",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "teacherlink",
                "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                "S3_BUCKET": "${var.S3_BUCKET}",
                "AWS_LOCATION_API_KEY": "<REDACTED>",
                "FIREBASE_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "LanguagesdataLogGroup"
          ]
        },
        "CreateOTPLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "teacherlink-deployments-ap-south-1",
              "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
            },
            "Handler": "src/handlers/createOTP.createOTP",
            "Runtime": "nodejs18.x",
            "FunctionName": "teacher-link-staging-createOTP",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                "DB_USER": "teacherlink_user",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "teacherlink",
                "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                "S3_BUCKET": "${var.S3_BUCKET}",
                "AWS_LOCATION_API_KEY": "<REDACTED>",
                "FIREBASE_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateOTPLogGroup"
          ]
        },
        "GetOTPLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "teacherlink-deployments-ap-south-1",
              "S3Key": "serverless/teacher-link/staging/1741429811641-2025-03-08T10:30:11.641Z/teacher-link.zip"
            },
            "Handler": "src/handlers/getOTP.getOTP",
            "Runtime": "nodejs18.x",
            "FunctionName": "teacher-link-staging-getOTP",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "DB_HOST": "inspire-edge-db.cnawwwkeyq7q.ap-south-1.rds.amazonaws.com",
                "DB_USER": "teacherlink_user",
                "DB_PASSWORD": "<REDACTED>",
                "DB_NAME": "teacherlink",
                "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                "DYNAMODB_TABLE": "${var.DYNAMODB_TABLE}",
                "S3_BUCKET": "${var.S3_BUCKET}",
                "AWS_LOCATION_API_KEY": "<REDACTED>",
                "FIREBASE_API_KEY": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetOTPLogGroup"
          ]
        },
        "GeocodeLambdaVersiongziZRv2xvJrm4s8jmjxo5xXtGyY2TRFzXO1obOg4KA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GeocodeLambdaFunction"
            },
            "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
          }
        },
        "UsersLambdaVersionvDNelS3UHP6JmSaeVlNHN4NTpwblIpetqFr3xCl7M": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UsersLambdaFunction"
            },
            "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
          }
        },
        "LogingoogleLambdaVersionaNVXtWtSW4uexEZ4PsSq33FfB5kmJxe7aDuE0Mq6hf4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "LogingoogleLambdaFunction"
            },
            "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
          }
        },
        "CreateOrganizationLambdaVersionCd1c9rm0GjKqh7y1QEWsslgAjGeKy9Ek11U8gCpRFk4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateOrganizationLambdaFunction"
            },
            "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
          }
        },
        "DesignationdataLambdaVersionnRNsUlwRZjhrdGQ77gEkDF8VRqBEajX2Q2woZXZkwI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DesignationdataLambdaFunction"
            },
            "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
          }
        },
        "EducationdataLambdaVersionJatbiSqQFykoWPxwz621KuEwcl8FhQqSBysnZLg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EducationdataLambdaFunction"
            },
            "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
          }
        },
        "LanguagesdataLambdaVersion2OzDypi0sFFknyIzt10D6lLUwcPe8g2LaaYa0FmYfA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "LanguagesdataLambdaFunction"
            },
            "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
          }
        },
        "CreateOTPLambdaVersionR6Qpva35kW1pJGA3n74IVUtPoXRxhAkTN12XB0K5o": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateOTPLambdaFunction"
            },
            "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
          }
        },
        "GetOTPLambdaVersionGi5919cK7bTY2pbXojCd2Nkl2BRjzMClWjjUY81ixY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetOTPLambdaFunction"
            },
            "CodeSha256": "wJUhSHmwYSZB6HM+PGLDOzHX/tbTSAO+UIIAIjB4viU="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "staging-teacher-link",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceGeocode": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "geocode",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsers": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "users",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsersIdVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUsers"
            },
            "PathPart": "{id}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceLogingoogle": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "logingoogle",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceOrganization": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "organization",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceOrganizationIdVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceOrganization"
            },
            "PathPart": "{id}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceConstants": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "constants",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceEducationDashdata": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "education-data",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceLanguages": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "languages",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceOtp": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "otp",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceOtpCreate": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceOtp"
            },
            "PathPart": "create",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceOtpVerify": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceOtp"
            },
            "PathPart": "verify",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodGeocodeOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "AWS_PROXY",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ],
              "IntegrationHttpMethod": "POST",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GeocodeLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceGeocode"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>"
          },
          "DependsOn": [
            "GeocodeLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodOrganizationOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceOrganization"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodOrganizationIdVarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceOrganizationIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodConstantsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceConstants"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodOtpCreateOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceOtpCreate"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodOtpVerifyOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceOtpVerify"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodGeocodeGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceGeocode"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GeocodeLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GeocodeLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUsersPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsers"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UsersLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UsersLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUsersIdVarGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UsersLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UsersLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUsersIdVarPut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UsersLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UsersLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUsersIdVarDelete": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "DELETE",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UsersLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UsersLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodLogingooglePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceLogingoogle"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LogingoogleLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "LogingoogleLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodOrganizationPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceOrganization"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateOrganizationLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "CreateOrganizationLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodOrganizationIdVarGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceOrganizationIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateOrganizationLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "CreateOrganizationLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodOrganizationIdVarPut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceOrganizationIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateOrganizationLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "CreateOrganizationLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodOrganizationIdVarDelete": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "DELETE",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceOrganizationIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateOrganizationLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "CreateOrganizationLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodConstantsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceConstants"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DesignationdataLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "DesignationdataLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodEducationDashdataGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceEducationDashdata"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "EducationdataLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "EducationdataLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodLanguagesGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceLanguages"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LanguagesdataLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "LanguagesdataLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodOtpCreatePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceOtpCreate"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateOTPLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "CreateOTPLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodOtpVerifyPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceOtpVerify"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetOTPLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetOTPLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1741429790557": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "staging"
          },
          "DependsOn": [
            "ApiGatewayMethodGeocodeOptions",
            "ApiGatewayMethodOrganizationOptions",
            "ApiGatewayMethodOrganizationIdVarOptions",
            "ApiGatewayMethodConstantsOptions",
            "ApiGatewayMethodOtpCreateOptions",
            "ApiGatewayMethodOtpVerifyOptions",
            "ApiGatewayMethodGeocodeGet",
            "ApiGatewayMethodGeocodeOptions",
            "ApiGatewayMethodUsersPost",
            "ApiGatewayMethodUsersIdVarGet",
            "ApiGatewayMethodUsersIdVarPut",
            "ApiGatewayMethodUsersIdVarDelete",
            "ApiGatewayMethodLogingooglePost",
            "ApiGatewayMethodOrganizationPost",
            "ApiGatewayMethodOrganizationIdVarGet",
            "ApiGatewayMethodOrganizationIdVarPut",
            "ApiGatewayMethodOrganizationIdVarDelete",
            "ApiGatewayMethodConstantsGet",
            "ApiGatewayMethodEducationDashdataGet",
            "ApiGatewayMethodLanguagesGet",
            "ApiGatewayMethodOtpCreatePost",
            "ApiGatewayMethodOtpVerifyPost"
          ]
        },
        "GeocodeLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GeocodeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UsersLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UsersLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "LogingoogleLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "LogingoogleLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CreateOrganizationLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateOrganizationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "DesignationdataLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DesignationdataLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "EducationdataLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EducationdataLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "LanguagesdataLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "LanguagesdataLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CreateOTPLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateOTPLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetOTPLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetOTPLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "teacherlink-deployments-ap-south-1",
          "Export": {
            "Name": "sls-teacher-link-staging-ServerlessDeploymentBucketName"
          }
        },
        "GeocodeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GeocodeLambdaVersiongziZRv2xvJrm4s8jmjxo5xXtGyY2TRFzXO1obOg4KA"
          },
          "Export": {
            "Name": "sls-teacher-link-staging-GeocodeLambdaFunctionQualifiedArn"
          }
        },
        "UsersLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UsersLambdaVersionvDNelS3UHP6JmSaeVlNHN4NTpwblIpetqFr3xCl7M"
          },
          "Export": {
            "Name": "sls-teacher-link-staging-UsersLambdaFunctionQualifiedArn"
          }
        },
        "LogingoogleLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "LogingoogleLambdaVersionaNVXtWtSW4uexEZ4PsSq33FfB5kmJxe7aDuE0Mq6hf4"
          },
          "Export": {
            "Name": "sls-teacher-link-staging-LogingoogleLambdaFunctionQualifiedArn"
          }
        },
        "CreateOrganizationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateOrganizationLambdaVersionCd1c9rm0GjKqh7y1QEWsslgAjGeKy9Ek11U8gCpRFk4"
          },
          "Export": {
            "Name": "sls-teacher-link-staging-CreateOrganizationLambdaFunctionQualifiedArn"
          }
        },
        "DesignationdataLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DesignationdataLambdaVersionnRNsUlwRZjhrdGQ77gEkDF8VRqBEajX2Q2woZXZkwI"
          },
          "Export": {
            "Name": "sls-teacher-link-staging-DesignationdataLambdaFunctionQualifiedArn"
          }
        },
        "EducationdataLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EducationdataLambdaVersionJatbiSqQFykoWPxwz621KuEwcl8FhQqSBysnZLg"
          },
          "Export": {
            "Name": "sls-teacher-link-staging-EducationdataLambdaFunctionQualifiedArn"
          }
        },
        "LanguagesdataLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "LanguagesdataLambdaVersion2OzDypi0sFFknyIzt10D6lLUwcPe8g2LaaYa0FmYfA"
          },
          "Export": {
            "Name": "sls-teacher-link-staging-LanguagesdataLambdaFunctionQualifiedArn"
          }
        },
        "CreateOTPLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateOTPLambdaVersionR6Qpva35kW1pJGA3n74IVUtPoXRxhAkTN12XB0K5o"
          },
          "Export": {
            "Name": "sls-teacher-link-staging-CreateOTPLambdaFunctionQualifiedArn"
          }
        },
        "GetOTPLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetOTPLambdaVersionGi5919cK7bTY2pbXojCd2Nkl2BRjzMClWjjUY81ixY"
          },
          "Export": {
            "Name": "sls-teacher-link-staging-GetOTPLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/staging"
              ]
            ]
          },
          "Export": {
            "Name": "sls-teacher-link-staging-ServiceEndpoint"
          }
        }
      }
    }
  }
}